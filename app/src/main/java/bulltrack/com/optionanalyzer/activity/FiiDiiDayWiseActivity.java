package bulltrack.com.optionanalyzer.activity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import bulltrack.com.optionanalyzer.adapter.DayWiseAdapter;
import bulltrack.com.optionanalyzer.application.MyGreeksApplication;
import bulltrack.com.optionanalyzer.constants.Constants;
import bulltrack.com.optionanalyzer.dao.PartyRec;
import bulltrack.com.optiongreeks13.R;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.json.JSONObject;

public class FiiDiiDayWiseActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {
    /* access modifiers changed from: private */
    public Activity activity;
    DayWiseAdapter dayWiseAdapter;

    /* renamed from: li */
    List<PartyRec> f84li;
    ListView lvDayWise;
    ProgressBar progressBar;
    Spinner spinnerInst;
    Spinner spinnerParty;
    String strLatestDate = "";
    TextView tvEODDate;
    TextView tvHeading;
    String webServiceUrl = Constants.URL_SERVICE;

    public void onNothingSelected(AdapterView<?> adapterView) {
    }

    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long j) {
        Spinner spinner = (Spinner) adapterView;
        if (spinner.getId() == R.id.spnr_party_day_wise_instrument) {
            AsyncListViewLoader asyncListViewLoader = new AsyncListViewLoader();
            asyncListViewLoader.execute(new String[]{"31", "" + i, "" + this.spinnerParty.getSelectedItemPosition()});
        }
        if (spinner.getId() == R.id.spnr_party_day_wise_party) {
            AsyncListViewLoader asyncListViewLoader2 = new AsyncListViewLoader();
            asyncListViewLoader2.execute(new String[]{"31", "" + this.spinnerInst.getSelectedItemPosition(), "" + i});
        }
    }

    /* access modifiers changed from: protected */
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.activity = this;
        setContentView((int) R.layout.party_day_wise);
        this.progressBar = (ProgressBar) findViewById(R.id.progressbar_fii_daywise);
        ListView listView = (ListView) findViewById(R.id.lv_party_day_wise_data);
        this.lvDayWise = listView;
        listView.setEmptyView(findViewById(R.id.empty));
        this.tvHeading = (TextView) findViewById(R.id.tv_party_day_wise_heading);
        this.tvEODDate = (TextView) findViewById(R.id.tv_party_day_wise_eod_date);
        ((ImageView) findViewById(R.id.img_party_day_wise_help)).setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                AlertDialog create = new AlertDialog.Builder(FiiDiiDayWiseActivity.this).create();
                create.setTitle("Help");
                create.setMessage("There are 4 categories of traders (Party): \n 1. FII (Foreign Institutional Investors )\n 2. DII (Domestic Institutional Investors / MFs) \n 3. Pro (Proprietary Traders / Brokers ) \n 4. Client (Clients of Brokers / Retail traders ) \n\n ------------- \n  ** FUTIDX - Index Future  \n     FUTSTK - Stock Future  \n     OPTIDXCALL -  Index Option Call \n     OPTIDXPUT  -  Index Option Put \n     OPTSTKCALL -  Stock Option Call \n     OPTSTKPUT -  Stock Option Put \n\n ------------- \n This screen shows the Open Interest generated by each party day wise. You can see the Open Interest build up  separately for each instrument type. This is helpful in  early spotting of trend change in case there is major shift in the open interest for any party specially FIIs.");
                create.show();
            }
        });
        Spinner spinner = (Spinner) findViewById(R.id.spnr_party_day_wise_instrument);
        this.spinnerInst = spinner;
        spinner.setOnItemSelectedListener(this);
        Spinner spinner2 = (Spinner) findViewById(R.id.spnr_party_day_wise_party);
        this.spinnerParty = spinner2;
        spinner2.setOnItemSelectedListener(this);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        new AsyncListViewLoader().execute(new String[]{"31", "0", "0"});
    }

    /* access modifiers changed from: private */
    public void loadSpinnerIntrument() {
        ArrayAdapter arrayAdapter = new ArrayAdapter(this, 17367048, getGreekApplication().getIntrumentNamesFromDayWise());
        arrayAdapter.setDropDownViewResource(17367049);
        this.spinnerInst.setAdapter(arrayAdapter);
    }

    /* access modifiers changed from: private */
    public void loadSpinnerParty() {
        ArrayAdapter arrayAdapter = new ArrayAdapter(this, 17367048, getGreekApplication().getPartyNamesFromDayWise());
        arrayAdapter.setDropDownViewResource(17367049);
        this.spinnerParty.setAdapter(arrayAdapter);
    }

    /* access modifiers changed from: protected */
    public MyGreeksApplication getGreekApplication() {
        return (MyGreeksApplication) getApplicationContext();
    }

    private class AsyncListViewLoader extends AsyncTask<String, Void, List<PartyRec>> {
        private final ProgressDialog dialog;

        private AsyncListViewLoader() {
            this.dialog = new ProgressDialog(FiiDiiDayWiseActivity.this);
        }

        /* access modifiers changed from: protected */
        public List<PartyRec> doInBackground(String... strArr) {
            FiiDiiDayWiseActivity.this.f84li = new ArrayList();
            String dayWiseUpdateDate = FiiDiiDayWiseActivity.this.getGreekApplication().getDayWiseUpdateDate();
            long j = 0;
            try {
                if (FiiDiiDayWiseActivity.this.getGreekApplication().isInternetAvailable()) {
                    HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(FiiDiiDayWiseActivity.this.webServiceUrl + "30").openConnection();
                    httpURLConnection.setConnectTimeout(5000);
                    httpURLConnection.setDoOutput(true);
                    httpURLConnection.setRequestProperty("Accept-Charset", "UTF-8");
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream(), "UTF-8"));
                    String readLine = bufferedReader.readLine();
                    bufferedReader.close();
                    String obj = new JSONObject(readLine).get("PartyDateTime").toString();
                    long time = FiiDiiDayWiseActivity.this.getGreekApplication().dateFormatter(obj, Constants.DT_FMT_yyyy_MM_dd_HH_m_ss).getTime();
                    if (dayWiseUpdateDate != null) {
                        j = FiiDiiDayWiseActivity.this.getGreekApplication().dateFormatter(dayWiseUpdateDate, Constants.DT_FMT_yyyy_MM_dd_HH_m_ss).getTime();
                    }
                    if (obj != null && j < time) {
                        HttpURLConnection httpURLConnection2 = (HttpURLConnection) new URL(FiiDiiDayWiseActivity.this.webServiceUrl + strArr[0]).openConnection();
                        httpURLConnection2.setConnectTimeout(Constants.VOLLEY_RESPONSE_TIMEOUT);
                        httpURLConnection2.setDoOutput(true);
                        httpURLConnection2.setRequestProperty("Accept-Charset", "UTF-8");
                        InputStream inputStream = httpURLConnection2.getInputStream();
                        BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
                        String readLine2 = bufferedReader2.readLine();
                        Type type = new TypeToken<List<PartyRec>>() {
                        }.getType();
                        Gson create = new GsonBuilder().setDateFormat(Constants.DT_FMT_yyyy_MM_dd_HH_m_ss).create();
                        FiiDiiDayWiseActivity.this.f84li = (List) create.fromJson(readLine2, type);
                        if (inputStream != null) {
                            inputStream.close();
                        }
                        bufferedReader2.close();
                        if (httpURLConnection2 != null) {
                            httpURLConnection2.disconnect();
                        }
                        FiiDiiDayWiseActivity.this.getGreekApplication().deletePartyDayWise();
                        FiiDiiDayWiseActivity.this.getGreekApplication().insertPartyDayWsie(FiiDiiDayWiseActivity.this.f84li);
                    }
                }
            } catch (IOException | Exception unused) {
            }
            int parseInt = Integer.parseInt(strArr[1]);
            int parseInt2 = Integer.parseInt(strArr[2]);
            FiiDiiDayWiseActivity fiiDiiDayWiseActivity = FiiDiiDayWiseActivity.this;
            fiiDiiDayWiseActivity.f84li = fiiDiiDayWiseActivity.getGreekApplication().getPartyDayWiseOI(FiiDiiDayWiseActivity.this.getGreekApplication().getIntrumentNamesFromDayWise().get(parseInt), FiiDiiDayWiseActivity.this.getGreekApplication().getPartyNamesFromDayWise().get(parseInt2));
            String dayWiseUpdateDate2 = FiiDiiDayWiseActivity.this.getGreekApplication().getDayWiseUpdateDate();
            if (dayWiseUpdateDate2 != null) {
                j = FiiDiiDayWiseActivity.this.getGreekApplication().dateFormatter(dayWiseUpdateDate2, Constants.DT_FMT_yyyy_MM_dd_HH_m_ss).getTime();
            }
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(Constants.DT_FMT_dd_MMM_yyyy);
            FiiDiiDayWiseActivity.this.strLatestDate = simpleDateFormat.format(new Date(j));
            return FiiDiiDayWiseActivity.this.f84li;
        }

        /* access modifiers changed from: protected */
        public void onPreExecute() {
            super.onPreExecute();
            FiiDiiDayWiseActivity.this.progressBar.setVisibility(0);
        }

        /* access modifiers changed from: protected */
        public void onPostExecute(List<PartyRec> list) {
            super.onPostExecute(list);
            if (list != null) {
                TextView textView = FiiDiiDayWiseActivity.this.tvHeading;
                textView.setText(list.get(0).getParty() + " - " + list.get(0).getInstrument());
                TextView textView2 = FiiDiiDayWiseActivity.this.tvEODDate;
                textView2.setText("EOD update : " + FiiDiiDayWiseActivity.this.strLatestDate);
                FiiDiiDayWiseActivity.this.dayWiseAdapter = new DayWiseAdapter(FiiDiiDayWiseActivity.this.activity, list);
                FiiDiiDayWiseActivity.this.lvDayWise.setAdapter(FiiDiiDayWiseActivity.this.dayWiseAdapter);
                FiiDiiDayWiseActivity.this.dayWiseAdapter.setItemList(list);
                FiiDiiDayWiseActivity.this.dayWiseAdapter.notifyDataSetChanged();
            }
            if (FiiDiiDayWiseActivity.this.spinnerInst.getAdapter() == null) {
                FiiDiiDayWiseActivity.this.loadSpinnerIntrument();
            }
            if (FiiDiiDayWiseActivity.this.spinnerParty.getAdapter() == null) {
                FiiDiiDayWiseActivity.this.loadSpinnerParty();
            }
            FiiDiiDayWiseActivity.this.progressBar.setVisibility(4);
        }
    }
}
